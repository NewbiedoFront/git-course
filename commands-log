git init --------------------------------------------------<= Iniciar o Monitoramento 

git config user.name "Iury Chagas" ------------------------<= Configurar o Nome do admin apenas para o repositorio em questão
git config user.email "iurychagas@icloud.com" -------------<= Configurar o email do admin apenas para o repositorio em questão
git config --global user.name "Iury Chagas" ---------------<= Configurar o Nome do Admin/Master
git config --global user.email "iurychagas@icloud.com" ----<= Configurar o email do Admin/Master
git config core.editor ------------------------------------<= Configurar o Editor padrão para desenvolvimento
git config --list -----------------------------------------<= Mostra todas as configurações personalizadas e padrões do git 

git status ------------------------------------------------<= Mostrar o status atual do repositorio local :p

git add	---------------------------------------------------<= Adicionando ou atualizando alterações nos arqs para a staging area/index
git commit -m "msg..." ------------------------------------<= Criando novo commit com mensagem
git log ---------------------------------------------------<= Visualização de commit e msgs
git log --decorate ----------------------------------------<= Visualização mais completa dos commits
git log --author="Iury" -----------------------------------<= Visualizar todos os commits de um autor especifico
git shortlog ----------------------------------------------<= Visualizar apenas as mensagens dos commits
git shortlog -sn ------------------------------------------<= Visualizar apenas n° de commits realizados por cada autor
git log --graph -------------------------------------------<= Mostrar os commits visualmente como grafico
git whatchanged -------------------------------------------<= Mostra além dos commits, "quais arqs" foram alterados em cada commit
git whatchanged -p ----------------------------------------<= Mostra quais alterações cada commit fez em cada arquivo
git log -p ------------------------------------------------<= Tem a mesma função do whatchanged -p |
git log -g ------------------------------------------------<= Visualizar commits que já foram deletados da HEAD. Função conhecida como "reflog"
git reflog show -------------------------------------------<= Mostra versão abreviada do historico de commits em uma HEAD

git show [n°rash] -----------------------------------------<= Visualizar informações do commit como autor, data, hora, mensagem de commit


git diff --------------------------------------------------<= Visualiar e comparar alterações atuais com as do ultimo commit
git diff --name-only --------------------------------------<= Mostra apenas o nome dos arquivos que foram alterados e não commitados

git commit -am "msg..." -----------------------------------<= Adicionar todas as modificações em um commmit

git reset HEAD --------------------------------------------<= Retorna o arq atual para untracked e mantem o status do ultimo commit
git reset --soft ------------------------------------------<= Retorna para para a fila de espera de commits --"Staged"
git reset --mixed -----------------------------------------<= Retorna para antes da Fila de espera de commits [index / Staging Area] --"Modified"
git reset --hard ------------------------------------------<= Manda as alterações e o commit para marte

git revert ------------------------------------------------<= Desfaz as alterações que um commit antigo fez "isoladamente sem alterar commits posteriores"


git tag -a 0.0.0 -m "description" -------------------------<= Adicionar a tag, tipo de modificação e Mensagem de commit
git push origin master --tags  ----------------------------<= Empurra a nova tag para o repositorio remoto

git ls ----------------------------------------------------<= Visualizar Todos os arqs que estão dentro da pasta monitorados e não monitorados
git ls-files ----------------------------------------------<= Mostra todos os arqs monitorados

git remote ------------------------------------------------<= Mostra quais repositorios remotos o repositorio local tem
git remote add NomeDoRepositorio http://url ---------------<= Criando, Nomeando e Linkando um repositorio remoto, Geralmente nomeado "origin"
git push NomeDoRepositorioRemoto NomeDaBranch -------------<= Empurrar os commits alterados para o repositorio remoto
git pull NomeDoRepositorioRemoto NomeDaBranch -------------<= Puxa as atualizações do repositorio remoto para o local
git pull -u NomeDaBranch ----------------------------------<= Fazer com que a branch criada local seja a mesma criada no repositorio remoto

git clone https://urlDoRepositorioRemoto ------------------<= Para Baixar uma copia "clonar" um repositorio remoto para o repositorio local


git branch ------------------------------------------------<= Visualizar branches locais
git branch -r ---------------------------------------------<= Visualizar somente as branches remotas 
git branch NomeDoBranch -----------------------------------<= Criar um Novo Branch
git branch -D NomeDoBranch --------------------------------<= Deletar um Branch
git checkout -b -------------------------------------------<= Atalho para CRIAR e "entrar/mudar/pular" para esse novo branch "Switched to..."
* NomedaBranch --------------------------------------------<= O * Indica em qual branch estamos no repositorio local
git checkout NomeDaBranch ---------------------------------<= Para pular/mudar de uma branch para outra
git checkout NomeDoArquivo --------------------------------<= Reseta esse arquivo para o ultimo estado em que se estava salvo no repositorio
git branch -t NovoBranch NomeDoRepoRemoto/NomeDaBranch ----<= O -t indica que o branch criada local deve ser traqueada com a branch remota

git merge NomeDoBranch ------------------------------------<= Para Mesclar/Fundir commits de um branch com outro branch. Ex. Local c/ o Remoto
git rebase ------------------------------------------------<= Atualiza uma branch com base em outra
git rebase BranchBase BranchASerAtualizado ----------------<= Como Exemplo o BranchBase seria a Master e o BranchASerAtualizado seri dev
git rebase master dev -------------------------------------<= Pegando Todas as atualizações do branch master e fundindo na branch dev
git rebase --continue -------------------------------------<= Para continuar o processo de rebase apos resolução manual de confiltos

git stash -------------------------------------------------<= salva alterações que não foram commitadas em um local temporario
git stash "É salvar o trampo em progresso de sexta para retornar na segunda exatamente de onde parou!"

git stash list --------------------------------------------<= Mostra todas as alterações que estão salvas nesse local temporario
git stash pop ---------------------------------------------<= Retomar o ultimo status de alterações lançadas no stash
git stash apply stash@{N°} --------------------------------<= Retomar um status de alterações especifico conforme os que estão na lista do stash
git stash drop --------------------------------------------<= Deleta o status de alterações de dentro do stash

git bisect start ------------------------------------------<= Para procurar commits especificos
git bisect bad HEAD ---------------------------------------<= Indico que o inicio é ruim!
git bisect good hashDaQualEuEscolhiParaComecarAProcura ----<= Indico que até nesse commit estava Bom!
Este recurso vai escolhendo commits especificos a serem observados e vc deve apenas indicar se esta "proximo/ou não" do commit alvo q fez tal alteração
